-- MySQL Script generated by MySQL Workbench
-- Чт 22 ноя 2018 11:13:59
-- Артемьев Алексей
-- Model: GB_Market_Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';


ALTER DATABASE `geek_market` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
-- -----------------------------------------------------
-- Table `geek_market`.`manufacturer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geek_market`.`manufacturer` ;

CREATE TABLE IF NOT EXISTS `geek_market`.`manufacturer` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NULL,
  `image` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
  ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `geek_market`.`manufacturer` (`id`, `name`, `image`) VALUES ('1', 'Питер', 'images/publisher/piter.jpg');
INSERT INTO `geek_market`.`manufacturer` (`id`, `name`, `image`) VALUES ('2', 'ДМК Пресс', '');
INSERT INTO `geek_market`.`manufacturer` (`id`, `name`, `image`) VALUES ('3', 'Эксмо', 'images/publisher/eksmo.jpg');

-- -----------------------------------------------------
-- Table `geek_market`.`product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geek_market`.`product` ;

CREATE TABLE IF NOT EXISTS `geek_market`.`product` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `pn` VARCHAR(45) NOT NULL,
  `manufacturer_id` INT(11) NULL,
  `image` VARCHAR(70) NULL,
  `price` DECIMAL NULL,
  `weight` DECIMAL NULL,
  `length` DECIMAL NULL,
  `width` DECIMAL NULL,
  `height` DECIMAL NULL,
  `status` TINYINT(1) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_product_idx` (`manufacturer_id` ASC),
  CONSTRAINT `fk_product`
  FOREIGN KEY (`manufacturer_id`)
  REFERENCES `geek_market`.`manufacturer` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION)
  ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `geek_market`.`product` (`pn`, `manufacturer_id`, `image`, `price`, `weight`, `length`, `width`, `height`, `status`) VALUES ('142431463', '1', 'images/product/filosofiya-java-1.jpg', '1247.00', '1640.00', '240.00', '170.00', '50.00', '1');
INSERT INTO `geek_market`.`product` (`pn`, `manufacturer_id`, `image`, `price`, `weight`, `length`, `width`, `height`, `status`) VALUES ('7821666', '3', 'images/product/learn-java-1.jpg', '959.00', '1400.00', '260.00', '205.0000', '50.00', '1');
INSERT INTO `geek_market`.`product` (`pn`, `manufacturer_id`, `image`, `price`, `weight`, `length`, `width`, `height`, `status`) VALUES ('143196242', '2', 'images/product/spring-in-action-1.jpg', '719.00', '0.00', '0.00', '0.00', '0.00', '0');
INSERT INTO `geek_market`.`product` (`pn`, `manufacturer_id`, `image`, `price`, `weight`, `length`, `width`, `height`, `status`) VALUES ('28336354', '1', 'images/product/clean-code-1.jpg', '440.00', '0.00', '0.00', '0.00', '0.00', '1');

-- -----------------------------------------------------
-- Table `geek_market`.`product_description`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geek_market`.`product_description` ;

CREATE TABLE IF NOT EXISTS `geek_market`.`product_description` (
  `product_id` INT(11) NOT NULL,
  `name` VARCHAR(100) NULL,
  `description` VARCHAR(3000) NULL,
  `meta_title` VARCHAR(255) NULL,
  `meta_description` VARCHAR(255) NULL,
  PRIMARY KEY (`product_id`),
  CONSTRAINT `fk_product_description`
  FOREIGN KEY (`product_id`)
  REFERENCES `geek_market`.`product` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION)
  ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `geek_market`.`product_description` (`product_id`, `name`, `description`, `meta_title`, `meta_description`) VALUES ('1', 'Философия Java', 'Впервые читатель может познакомиться с полной версией этого классического труда, который ранее на русском языке печатался в сокращении. Книга, выдержавшая в оригинале не одно переиздание, за глубокое и поистине философское изложение тонкостей языка Java считается одним из лучших пособий для программистов. Чтобы по-настоящему понять язык Java, необходимо рассматривать его не просто как набор неких команд и операторов, а понять его \"философию\", подход к решению задач, в сравнении с таковыми в других языках программирования. На этих страницах автор рассказывает об основных проблемах написания кода: в чем их природа и какой подход использует Java в их разрешении. Поэтому обсуждаемые в каждой главе черты языка неразрывно связаны с тем, как они используются для решения определенных задач.', 'Философия Java', 'Философия Java Брюс Эккель Thinking in Java');
INSERT INTO `geek_market`.`product_description` (`product_id`, `name`, `description`, `meta_title`, `meta_description`) VALUES ('2', 'Изучаем Java', '\"Изучаем Java\" - это не просто книга. Она не только научит вас теории языка Java и объектно-ориентированного программирования, она сделает вас программистом. В ее основу положен уникальный метод обучения на практике. В отличие от классических учебников информация дается не в текстовом, а в визуальном представлении. Вы освоите в деле все самое нужное: синтаксис и концепции языка, работу с потоками, работу в сети, распределенное программирование. Вся теория закрепляется интереснейшими примерами и тестами.', 'Изучаем Java', 'Изучаем Java Кэти Сиерра Берт Бейтс');
INSERT INTO `geek_market`.`product_description` (`product_id`, `name`, `description`, `meta_title`, `meta_description`) VALUES ('3', 'Spring в действии', 'Фреймворк Spring Framework – необходимый инструмент для разработчиков приложений на Java.\n\nВ книге описана последняя версия Spring 3, который несет в себе новые мощные особенности, такие как язык выражений SpEL, новые аннотации для работы с контейнером IoC и поддержка архитектуры REST. Автор, Крейг Уоллс, обладает особым талантом придумывать весьма интересные примеры, сосредоточенные на особенностях и приемах использования Spring, которые действительно будут полезны читателям.\n\nВ русскоязычном переводе добавлены главы из 2-го американского издания, которые автор не включил в 3-е издание «Spring in Action».\n\nИздание предназначено как для начинающих пользователей фреймворка, так и для опытных пользователей Spring, желающих задействовать новые возможности версии 3.0.', 'Spring в действии', 'Spring в действии Крейг Уоллс');
INSERT INTO `geek_market`.`product_description` (`product_id`, `name`, `description`, `meta_title`, `meta_description`) VALUES ('4', 'Чистый код: создание, анализ и рефакторинг', 'Даже плохой программный код может работать. Однако если код не является «чистым», это всегда будет мешать развитию проекта и компании-разработчика, отнимая значительные ресурсы на его поддержку и «укрощение».\n\nЭта книга посвящена хорошему программированию. Она полна реальных примеров кода. Мы будем рассматривать код с различных направлений: сверху вниз, снизу вверх и даже изнутри. Прочитав книгу, вы узнаете много нового о коде. Более того, вы научитесь отличать хороший код от плохого. Вы узнаете, как писать хороший код и как преобразовать плохой код в хороший.\n\nКнига состоит из трех частей. В первой части излагаются принципы, паттерны и приемы написания чистого кода; приводится большой объем примеров кода. Вторая часть состоит из практических сценариев нарастающей сложности. Каждый сценарий представляет собой упражнение по чистке кода или преобразованию проблемного кода в код с меньшим количеством проблем. Третья часть книги – концентрированное выражение ее сути. Она состоит из одной главы с перечнем эвристических правил и «запахов кода», собранных во время анализа. Эта часть представляет собой базу знаний, описывающую наш путь мышления в процессе чтения, написания и чистки кода.', 'Чистый код: создание, анализ и рефакторинг', 'Чистый код: создание, анализ и рефакторинг Роберт Мартин');

-- -----------------------------------------------------
-- Table `geek_market`.`product_image`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geek_market`.`product_image` ;

CREATE TABLE IF NOT EXISTS `geek_market`.`product_image` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `product_id` INT(11) NULL,
  `image` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_product_image_idx` (`product_id` ASC),
  CONSTRAINT `fk_product_image`
  FOREIGN KEY (`product_id`)
  REFERENCES `geek_market`.`product` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION)
  ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `geek_market`.`product_image` (`product_id`, `image`) VALUES ('1', 'images/product/filosofiya-java-2.jpg');
INSERT INTO `geek_market`.`product_image` (`product_id`, `image`) VALUES ('1', 'images/product/filosofiya-java-3.jpg');
INSERT INTO `geek_market`.`product_image` (`product_id`, `image`) VALUES ('2', 'images/product/learn-java-2.jpg');
INSERT INTO `geek_market`.`product_image` (`product_id`, `image`) VALUES ('2', 'images/product/learn-java-3.jpg');


-- -----------------------------------------------------
-- Table `geek_market`.`option`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geek_market`.`option` ;

CREATE TABLE IF NOT EXISTS `geek_market`.`option` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `product_id` INT(11) NULL,
  `name` VARCHAR(255) NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_option_idx` (`product_id` ASC),
  CONSTRAINT `fk_option`
  FOREIGN KEY (`product_id`)
  REFERENCES `geek_market`.`product` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION)
  ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


-- -----------------------------------------------------
-- Table `geek_market`.`role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geek_market`.`role` ;

CREATE TABLE IF NOT EXISTS `geek_market`.`role` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(50) NULL,
  PRIMARY KEY (`id`))
  ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `geek_market`.`role` (name)
VALUES
('ROLE_CUSTOMER'),('ROLE_MANAGER'),('ROLE_ADMIN');


-- -----------------------------------------------------
-- Table `geek_market`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geek_market`.`user` ;

CREATE TABLE IF NOT EXISTS `geek_market`.`user` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(80) NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `phone` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`id`))
  ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `geek_market`.`user` (username,password,first_name,last_name,email,phone)
VALUES
('admin','$2a$04$Fx/SX9.BAvtPlMyIIqqFx.hLY2Xp8nnhpzvEEVINvVpwIPbA3v/.i','Admin','Admin','admin@gmail.com','+79881111111');

-- -----------------------------------------------------
-- Table `geek_market`.`user_roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geek_market`.`user_roles` ;

CREATE TABLE IF NOT EXISTS `geek_market`.`user_roles` (
  `user_id` INT(11) NOT NULL,
  `role_id` INT(11) NOT NULL,
  PRIMARY KEY (`user_id`, `role_id`),
  INDEX `fk_role_idx` (`role_id` ASC),
  CONSTRAINT `fk_user`
  FOREIGN KEY (`user_id`)
  REFERENCES `geek_market`.`user` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION,
  CONSTRAINT `fk_role`
  FOREIGN KEY (`role_id`)
  REFERENCES `geek_market`.`role` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION)
  ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

INSERT INTO `geek_market`.`user_roles` (user_id, role_id)
VALUES
(1, 1),
(1, 2),
(1, 3);


-- -----------------------------------------------------
-- Table `geek_market`.`cart`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `geek_market`.`cart` ;

CREATE TABLE IF NOT EXISTS `geek_market`.`cart` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `user_id` INT(11) NOT NULL,
  `product_id` INT(11) NOT NULL,
  `quantity` INT(5) NOT NULL,
  `date_added` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_cart_1_idx` (`user_id` ASC),
  INDEX `fk_cart_2_idx` (`product_id` ASC),
  CONSTRAINT `fk_cart_1`
  FOREIGN KEY (`user_id`)
  REFERENCES `geek_market`.`user` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION,
  CONSTRAINT `fk_cart_2`
  FOREIGN KEY (`product_id`)
  REFERENCES `geek_market`.`product` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION)
  ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;